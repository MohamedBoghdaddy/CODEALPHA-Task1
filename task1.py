# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12xC0dmg38f4SKudVQqfHYPo2oZJihQ5d
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt  # Import the matplotlib library
import seaborn as sns
from sklearn.cluster import KMeans
import random  # Import the random module

dataset1 = pd.read_csv("data.csv")

dataset2 = pd.read_csv("data_by_artist.csv")

dataset3 = pd.read_csv("data_by_genres.csv")

dataset4 = pd.read_csv("data_by_year.csv")

# 1. Data Understanding by Visualization and EDA
# Perform EDA on each dataset to understand its structure, missing values, and distributions
print(dataset1.info())
print(dataset2.info())
print(dataset3.info())
print(dataset4.info())

# 2. Music Over Time
# Visualize music trends over time from dataset4
plt.figure(figsize=(10, 6))
sns.lineplot(data=dataset4, x='year', y='acousticness', label='Acousticness')
sns.lineplot(data=dataset4, x='year', y='danceability', label='Danceability')
plt.title('Music Trends Over Time')
plt.xlabel('Year')
plt.ylabel('Value')
plt.legend()
plt.show()

# 3. Characteristics of Different Genres
# Explore characteristics of different genres from dataset3
genre_characteristics = dataset3.groupby('genres').mean()
print(genre_characteristics.head())

# 4. Clustering Genres with K-Means
# Use K-Means to cluster genres based on characteristics from dataset3
kmeans = KMeans(n_clusters=5, random_state=42)
genre_characteristics_clusters = kmeans.fit_predict(genre_characteristics)
genre_characteristics['cluster'] = genre_characteristics_clusters
print(genre_characteristics.head())

# 5. Clustering Songs with K-Means
# Use K-Means to cluster songs based on features from dataset3
features = dataset3.drop(['genres'], axis=1)  # Dropping 'genres' column as it's not a feature for clustering
kmeans_songs = KMeans(n_clusters=10, random_state=42)
song_clusters = kmeans_songs.fit_predict(features)
dataset3['cluster'] = song_clusters
print(dataset3.head())

print(dataset3.columns)

def recommend_songs(cluster_id, num_recommendations=5):
    cluster_songs_indices = dataset3.index[dataset3['cluster'] == cluster_id].tolist()
    recommended_song_indices = random.sample(cluster_songs_indices, min(num_recommendations, len(cluster_songs_indices)))
    recommended_songs = dataset3.iloc[recommended_song_indices]
    return recommended_songs

# Example: Recommend songs from cluster 0
recommended_songs_cluster_0 = recommend_songs(0, num_recommendations=5)
print("Recommended Songs from Cluster 0:")
print(recommended_songs_cluster_0)